. = torg + 1000
main:			mov #Img, r1					;set r1 as pointer to Img's beginning
					mov #Hash, r2					;set r2 as pointer to Hash's beginnig
					mov #Output, r4				;set r4 as pointer to Output's beginning

					clr r3								;calculate nCols x nRows and store in r3
					clr Temp							; --""--
					movb nCols, r3				; --""--
					movb nRows, Temp			; --""--
					tst Temp
					beq endp
					tst r3
					beq endp
					mul Temp, r3					; --""--
					jmp dupLoop

endp:			jmp finish

dupLoop:	movb (r1)+,(r4)+ 			; duplicate Img into Output label
					sob r3, dupLoop				; --""--

					mov #Output, r1				; initialize r1

					cmpb Enc, #1
					beq ENCRYPT						;if Enc==1, jump to encrypt label
					jmp DECRYPT						;else jump to decrypt label

ENCRYPT:

EncLine:	clr Temp
					movb (r1), Temp				;add value stored by pointer r1 (points to Img array) to r2
					add Temp, r2					; --""--
					movb (r2),(r1)+				; --""-- and moves to next byte in the line
					mov #Hash,r2					; --""--

					dec InLineL
					bne EncLine 					;using first nested loop for each byte in block's line, encrypting it by Hash function
					sub #4,r1							;initialize r1 to the first element in a block's line

					mov RowLoop, InLineCyclic		;Initialize cyclic counter
					sub #4,InLineCyclic					; --""--
					neg InLineCyclic						; --""--

					tst InLineCyclic
					beq EndDntCycl					;if inline cyclic == 0, pass

EncRepCycl:	mov #3, InLineL				;initialize InLineL for cyclMov loop
					add #3,r1							;initialize r1 to point to the last element in a block's line

					clr Temp							;Initialize temp and place in it the last element in the line
					movb (r1), Temp				; --""--

EncCyclMov:	dec r1								;move the value of (r1) to the next byte
					movb (r1),1(r1)				; --""--
					dec InLineL
					bne EncCyclMov						;if finished one cyclic move, continue
					movb Temp, (r1)				;restore the last element, last part of the cyclic move
					dec InLineCyclic
					bne EncRepCycl						;if finished cyclic operation on the line, continue

EndDntCycl:	clr Temp							;moves r1 to point to a beginning of the next line in a block
					movb nCols, Temp			; --""--
					add Temp, r1					; --""--

					mov #4, InLineL				;initialize InLineL for first nested loop
					dec RowLoop
					bne EncLine						;using second nested loop for each line in Img's block, Encrypting it by cyclic move

					clr r4
					mov r1, r5						; calculates if the program encrypted all blocks in a single column
					sub #Output, r5				; --""--
					clr Temp							; --""--
					movb nCols, Temp			; --""--
					div Temp, r4					; --""--
					clr Temp							; --""--
					movb nRows, Temp			; --""--
					mov #4, RowLoop				; --""-- + initialize loop itrations over lines in a block
					cmp r4, Temp					; --""--
					blo EncLine						; --""--

					clr Temp							; calculates nRows x nCols and stores it in r3
					movb nCols, Temp			; --""--
					mov Temp, r3					; --""--
					clr Temp							; --""--
					movb nRows, Temp			; --""--
					mul Temp, r3					; --""--

					sub r3, r1						; update r1 to the next block's column
					add #4, r1						; --""--

					mov r1, r4						; if (((r1-Output)>=nCols)) continue
					sub #Output, r4				; --""--
					clr Temp							; --""--
					movb nCols, Temp			; --""--
					cmp r4, Temp					; --""--
					blt EncLine						; --""--

jmp finish

DECRYPT:

DecLine:		mov #-1, Temp					;initialize Temp as counter in Hash
DecByte:		inc Temp							;find the corresponding index for value in
																;Hash that is equal to value in Img
						cmpb (r1), (r2)+			; --""--
						bne DecByte						; --""--

						mov #Hash, r2					;initialize r2 to pointer to Hash
						movb Temp, (r1)+			;decrypt byte
						dec InLineL
						bne DecLine
						sub #4,r1							;initialize r1 to the start of a block's line

						mov RowLoop, InLineCyclic		;Initialize cyclic counter
						sub #4,InLineCyclic					; --""--
						neg InLineCyclic						; --""--

						tst InLineCyclic
						beq DecDntCycl							;if Cyclic counter != 0 then don't cycle

DecRepCycl:	mov #3, InLineL							;initialize InLineL for cyclic move loop

						clr Temp										;stores the first byte in a block's line
						movb (r1), Temp							; --""--

DecCyclMov:	inc r1
						movb (r1),-1(r1)						;mov value in next byte to the previous byte
						dec InLineL									; --""--
						bne DecCyclMov							;if finished cycle move for line, continue
						movb Temp, (r1)							;restore the value stored in Temp
						sub #3, r1									;initialize r1
						dec InLineCyclic
						bne DecRepCycl							;repeat cyclic move in block

DecDntCycl:	clr Temp										;move to the next block's line
						movb nCols, Temp						; --""--
						add Temp, r1								; --""--

						mov #4, InLineL							;initialize InLineL for DecLine loop
						dec RowLoop
						bne DecLine

						clr r4								; if(((r1-Output)/nCols) >= nRows) continue | checks if we didn't bypass nRows, therefore if the
																	; index is still legal
						mov r1, r5						; --""--
						sub #Output, r5				; --""--
						clr Temp							; --""--
						movb nCols, Temp			; --""--
						div Temp, r4					; --""--
						clr Temp							; --""--
						movb nRows, Temp			; --""--
						mov #4, RowLoop				; --""--
						cmp r4, Temp					; --""--
						blo DecLine						; --""--


						clr Temp							; calculates nRows x nCols and stores it in r3
						movb nCols, Temp			; --""--
						mov Temp, r3					; --""--
						clr Temp							; --""--
						movb nRows, Temp			; --""--
						mul Temp, r3					; --""--

						sub r3, r1						; update r1 to the next block's column
						add #4, r1						; --""--

						mov r1, r4						; if (((r1-Output)>=nCols)) continue
						sub #Output, r4				; --""--
						clr Temp							; --""--
						movb nCols, Temp			; --""--
						cmp r4, Temp					; --""--
						blt DecLine						; --""--

finish:	 		halt
.even
InLineCyclic:		.word 	0
Temp:						.word 	0
InLineL:	 			.word		4
RowLoop:				.word 	4

;------------------------------------------------------------
