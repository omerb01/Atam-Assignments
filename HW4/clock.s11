tks = 177560
tkb = 177562
tps = 177564
tpb = 177566
lcs = 177546
.=torg +1000
main: mov #main, sp
          mov #str1, -(sp)
          jsr pc, printClock
          tst (sp)+
          jmp Finish


clock:  cmp @#clkctrl, #0
        beq regfclk
        cmp @#clkctrl, #1
        beq crackclk
        cmp @#clkctrl, #2
        beq bothclk
regfclk:
        cmp @#regfsec, #0
        bne fclock
        inc @#regftime
        br fclock
crackclk:
        cmp @#cracksecs, #0
        bne fclock
        inc @#cracktime
        br fclock
bothclk:
        inc @#cracktime
        inc @#regftime
fclock: rti

clockON:  mov #100, lcs
          rts pc

clockOFF: mov #0, lcs
          rts pc


printClock:
          mov 2(sp), -(sp)          ;prints command name
          mov #1, -(sp)
          jsr pc, printText
          cmp (sp)+, (sp)+

          mov #str2, -(sp)          ;prints "completed in"
          mov #1, -(sp)
          jsr pc, printText
          cmp (sp)+, (sp)+

          mov r2, -(sp)
          mov 4(sp), -(sp)
          jsr r2, cmpStr
          .ascii <crack&>
          .even
          cmp (sp), #0
          bne pushregf
          tst (sp)+
          mov (sp)+, r4
          mov @#cracksecs, -(sp)        ;prints regfsec in format "...x.x"
          cmp @#cracksecs, #0
          beq printz
          br tmprint
pushregf:
          tst (sp)+
          mov (sp)+, r4
          mov @#regfsec, -(sp)        ;prints regfsec in format "...x.x"
          cmp @#regfsec, #0
          beq printz
tmprint:  jsr pc, numPrintAsci
          tst (sp)+
          br dotprint
printz:   mov #60, @#tpb
bb_w:     tstb @#tps
          bpl bb_w
dotprint: mov #'., @#tpb
ib_w:     tstb @#tps
          bpl ib_w
;~~~~~~~ prints time left ~~~~~~~~~~~~~
          mov #23420, -(sp)
          mov r4, -(sp)

          mov r2, -(sp)
          mov 10(sp), -(sp)
          jsr r2, cmpStr
          .ascii <crack&>
          .even
          cmp (sp), #0
          bne movereg
          tst (sp)+
          mov (sp)+, r2
          mov @#cracktime, r2
          br divmils
movereg:  tst (sp)+
          mov (sp)+, r2
          mov @#regftime, r2
divmils:  mov r2, r3
          clr r2
          div 2(sp), r2
          cmp r2, #0
          bne milprint
          mov r3, r4
          clr r2
          mov 2(sp), r3
          div #12, r2
          mov r2, 2(sp)
          mov r4, r2
          br divmils
milprint: add #60, r2
          mov r2, @#tpb
qb_w:     tstb @#tps
          bpl qb_w
          mov (sp)+, r4
          tst (sp)+


          mov #str3, -(sp)          ;prints "sec"
          mov #1, -(sp)
          jsr pc, printText
          cmp (sp)+, (sp)+

          mov r2, -(sp)
          mov 4(sp), -(sp)
          jsr r2, cmpStr
          .ascii <crack&>
          .even
          cmp (sp), #0
          beq nullcrack
          mov #0, @#regftime
          mov #0, @#regfsec
          br endTime
nullcrack:
          mov #0, @#cracksecs
          mov #0, @#cracktime
endTime:  tst (sp)+
          mov (sp)+, r2
          rts pc


;stop:     halt

; receives:
; return address
; empty space
; the number to print
numPrintAsci:  mov #23420, -(sp)   ; devider for digits seperation
            mov 4(sp), -(sp)    ; push the number to convert again
            mov r2, -(sp)       ; temp
            mov r3, -(sp)
            mov 6(sp), -(sp)
devide:     clr r2
            cmp 6(sp), #0
            beq nfinish
            mov 6(sp), r3        ;move number to r2
            div 10(sp), r2
            tst r2
            beq keepdevide
printnum:   add #60, r2
            movb r2, @#tpb
nb_w:       tstb @#tps
            bpl nb_w
            cmp r2, #0
            beq iszero
            cmp r3, #0
            bne iszero
            cmp 6(sp), #0
            beq iszero
print_zero: mov #12, 10(sp)
dagain:     mov 6(sp), r3
            clr r2
            div 10(sp), r2
            cmp r3, #0
            bne nfinish
            mov #60, @#tpb
zb_w:       tstb @#tps
            bpl zb_w
            mov r2, 6(sp)
            br dagain

iszero:
            mov r3, 6(sp)
            br devide
keepdevide: mov 10(sp), r3
            clr r2
            div #12, r2
            mov r2, 10(sp)
            cmp 10(sp), #1
            beq nclear
            br devide
nclear:     mov 6(sp), r2
            clr 6(sp)
            br printnum


nfinish:    tst (sp)+
            ;mov (sp)+, r4
            mov (sp)+, r3
            mov (sp)+, r2
            cmp (sp)+, (sp)+
            rts pc

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

; recevies num of args to print, then the string addresses
; Stack:
; - return address
; - num of args
; - addresses

printText:  mov r0, -(sp)
            tst -(sp)      ; index for current string to print in the stack
            mov r1,-(sp)      ; string iterator
            mov #12, 2(sp)   ; advance the index to the first string
            mov 10(sp), r0  ; r0 = num of args
PTprintString:
            clr r1
            add 2(sp), r1
            add #2, 2(sp)     ; point to next string
            add sp, r1        ; r1 will point to the current string to print in the stack

PTprintLoop:  tstb @#tps
            bpl PTprintLoop
            cmpb @(r1), #'&
            beq PTstringEnd
            movb @(r1), @#tpb
            inc (r1)
            br PTprintLoop

PTstringEnd:  sob r0, PTprintString

mov (sp)+, r1
tst (sp)+
mov (sp)+, r0
rts pc

; receives the following stack:
; return address
; string to compare
; output:
; 1/0
cmpStr:   mov r1, -(sp)
          mov r2, r1
CSequal:  cmpb (r1)+, @4(sp)
          bne CSnequal
          inc 4(sp)               ;advances string to compare to
          cmpb (r1), #'&
          beq CSexit
          br CSequal

CSnequal:    mov #1, 4(sp)
          br CSend
CSexit:
          mov #0, 4(sp)
          br CSend

CSend:    mov r2, -(sp)
          clr -(sp)
          jsr pc, strlen
          add (sp), r2
          bit #1, r2
          beq CSfin
          inc r2
CSfin:    cmp (sp)+, (sp)+
          mov (sp)+, r1
          rts r2


; recevies the following stack (HOW THE STACK LOOKS WHEN ENTERS THE PROC):
; return address
; len of string after calculation (enters empty)
; string itself (addr)

strlen: mov r1, -(sp)
        mov 6(sp), r1       ;4(sp) = string
        clr 4(sp)
strloop:  cmpb (r1), #'&
          beq strFin
          inc 4(sp)         ;6(sp) = strlen counter
          inc r1
          br strloop
strFin:   inc 4(sp)         ;counts the '&'
          mov (sp)+, r1
          rts pc



Finish:     halt

str2: .ascii< completed in &>
.even
str1: .ascii<cr4ck&>
str3: .ascii<sec&>
clkctrl:   .word 4
cracktime: .word 12.
cracksecs: .word 52.
regftime: .word 53.                   ;global variable
regfsec: .word 23.                ;global variable
rate: .word 1000.               ;provided by the test
