tks = 177560
tkb = 177562
tps = 177564
tpb = 177566



.=torg + 1000
main: mov pc, sp
      tst -(sp)
      mov #Fash, -(sp)
      jsr pc, cmdSetHash
      tst (sp)+

halt

.=torg+5000
; this function received the stack in the following order:
; return address
; address pointing to hash
cmdSetHash:   mov #20, -(sp)
              mov 4(sp), -(sp)
              jsr pc, asciToOc    ;convert Hash to octal
              cmp (sp)+, (sp)+

              mov r2, -(sp)
              mov r3, -(sp)
              mov #20, -(sp)
              mov #Hash, r2
              mov 10(sp), r3
SHupdateHash: movb (r3)+, (r2)+
              dec (sp)
              bne SHupdateHash
              tst (sp)+
              mov (sp)+, r2
              mov (sp)+, r3

              mov #20, -(sp)
              mov 4(sp), -(sp)
              jsr pc, ocToAsci    ;convert Hash to octal
              cmp (sp)+, (sp)+

              mov #SHend, -(sp)
              mov 4(sp), -(sp)    ;push the converted Hash
              mov #SHstr, -(sp)
              mov #3, -(sp)       ; "Hash function set to" + <Hash> + "\n\r"
              jsr pc, printText
              cmp (sp)+, (sp)+
              cmp (sp)+, (sp)+
              rts pc
SHstr:        .ascii        <Hash function set to &>
SHend:        .ascii        <\n\r&>
.even

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.even
asciToOc:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toOcProcess:
      movb (r1), r2
      mov r2, -(sp)
      bic #777637, r2
      cmp r2, #140            ; is char?
      beq ocChar
ocNum:  mov (sp)+, r2
        bic #777760, r2
        br ocUpdate
ocChar: mov (sp)+, r2
        bic #777770, r2
        add #11, r2

ocUpdate:   movb r2, (r1)+
            dec r3
            beq toOcFinish
            br toOcProcess

toOcFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc


printText:  mov r0, -(sp)
            tst -(sp)      ; index for current string to print in the stack
            mov r1,-(sp)      ; string iterator
            mov #12, 2(sp)   ; advance the index to the first string
            mov 10(sp), r0  ; r0 = num of args
PTprintString:
            clr r1
            add 2(sp), r1
            add #2, 2(sp)     ; point to next string
            add sp, r1        ; r1 will point to the current string to print in the stack

PTprintLoop:  tstb @#tps
            bpl PTprintLoop
            cmpb @(r1), #'&
            beq PTstringEnd
            movb @(r1), @#tpb
            inc (r1)
            br PTprintLoop

PTstringEnd:  sob r0, PTprintString

            mov (sp)+, r1
            tst (sp)+
            mov (sp)+, r0
            rts pc

ocToAsci:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toAsciProcess:
          movb (r1), r2
          cmp r2, #12            ; is char?
          bge asciChar
asciNum:  bis #60, r2
          br asciUpdate
asciChar: bis #140, r2
          sub #11, r2

asciUpdate:   movb r2, (r1)+
              dec r3
              beq toAsciFinish
              br toAsciProcess

toAsciFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc


Fash:       .ascii <0123456789abcdef&>
.even
Hash:       .blkw 10
