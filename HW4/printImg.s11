tps = 177564
tpb = 177566

.=torg+1000
main: mov pc, sp
      tst -(sp)
      mov #IMG, -(sp)
      mov #4, -(sp)               ;NROWS
      mov #10, -(sp)              ;NCOLUMNS
      jsr pc, printImg

      tst (sp)+
      cmp (sp)+, (sp)+
IMG:    .byte	 1,  2,  1,  2, 0,   1,   2,    3
				.byte	 3,  4,  3,  4, 4,   5,   6,    7
				.byte	 5,  6,  5,  6, 10, 11, 12, 13
				.byte	 7,  0,  7,  0, 14, 15, 16, 17
      .even
      halt





.=torg + 2000
.even
; receives the following stack:
; return address
; amount of COLUMNS
; amount of ROWS
; Img address
; output:
; prints the image in HEX format

printImg: mov 4(sp), -(sp)
          mov 4(sp), -(sp)
          mov r1, -(sp)         ;IMG iterator
          mov 14(sp), r1
          bit #1, @#tps
PIstepCol:
          mov #1, -(sp)
          mov r1, -(sp)
          jsr pc, ocToAsci        ;converts the byte into ascii
          cmp (sp)+, (sp)+
PIbusy_wait: tstb @#tps
          bpl PIbusy_wait
          movb (r1), @#tpb        ;prints the byte in the IMG
          mov #1, -(sp)
          mov r1, -(sp)
          jsr pc, asciToOc        ;converts it back to octal
          cmp (sp)+, (sp)+
          inc r1
          dec 2(sp)
          bne PIstepCol
PInewline:tstb @#tps              ;prints newline
          bpl PInewline
          movb #'\n, @#tpb
PInewcrline:
          tstb @#tps
          bpl PInewcrline
          movb #'\r, @#tpb

          mov 10(sp), 2(sp)
          dec 4(sp)               ;continues to the next line
          bne PIstepCol

          mov (sp)+, r1
          cmp (sp)+, (sp)+
          rts pc


;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

ocToAsci:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toAsciProcess:
          movb (r1), r2
          cmp r2, #12            ; is char?
          bge asciChar
asciNum:  bis #60, r2
          br asciUpdate
asciChar: bis #140, r2
          sub #11, r2

asciUpdate:   movb r2, (r1)+
              dec r3
              beq toAsciFinish
              br toAsciProcess

toAsciFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc

asciToOc:; 2(sp) - #str , 4(sp) - size
      mov r1, -(sp)
      mov r2, -(sp)
      mov r3, -(sp)

      mov 10(sp), r1           ; 10(sp)=#str
      mov 12(sp), r3          ; 12(sp)=length

toOcProcess:
      movb (r1), r2
      mov r2, -(sp)
      bic #777637, r2
      cmp r2, #140            ; is char?
      beq ocChar
ocNum:  mov (sp)+, r2
        bic #777760, r2
        br ocUpdate
ocChar: mov (sp)+, r2
        bic #777770, r2
        add #11, r2

ocUpdate:   movb r2, (r1)+
            dec r3
            beq toOcFinish
            br toOcProcess

toOcFinish: mov (sp)+, r3
            mov (sp)+, r2
            mov (sp)+, r1
            rts pc
